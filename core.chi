
module core

def dup (a) a a
def swap (a b) b a
def bi (v q1 q2) v @q1 v @q2
def tri (v q1 q2 q3) v @q1 v @q2 v @q3

def square dup *



# lists

def uncons [head] [tail] bi

def each (l q)
    l uncons (hd tl)
    hd q call
    tl [tl q each] when

def to-list (stack-count)
    f [swap ;] stack-count do-times

def choose
    dup length -- 0 swap rand-range nth


def remove-if (test)
    dup [uncons (hd tl) tl test remove-if hd @test [hd ;] unless]
        [drop f]
        if

def remove (item) [item =] remove-if
def filter (test) [@test not] remove-if


def map t
def set-difference t


def when [] if
def unless [] swap if
def not [f] [t] if

def and [drop f] unless
def or [drop t] when

def -- 1 -
def ++ 1 +

def do-times (q i)
    q call
    i -- (i)
    i 0 > [q i do-times] when

