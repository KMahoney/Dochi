
module test

def factorial (n) n 1 <= [1] [n 1 - factorial n *] if

def run-test call ["."] ["X"] if write



module main

def main
    L{

    # simple tests

    [t]
    [f not]
    [t t and]
    [t f and not]
    [f t and not]
    [t t or]
    [t f or]
    [f t or]
    [f f or not]

    [t [t] lazy-and]
    [t [f] lazy-and not]
    [f [t] lazy-and not]
    [f [f] lazy-and not]
    [t [t] lazy-or]
    [t [f] lazy-or]
    [f [t] lazy-or]
    [f [f] lazy-or not]

    [1 [2] lazy-or 1 =]
    [f [2] lazy-or 2 =]

    [f L{ [f] [f] [f] [4] [5] [6] } [lazy-or] each 4 =]
    [t L{ [1] [2] [3] [4] [5] [6] } [lazy-and] each 6 =]
    [t L{ [1] [2] [f] [4] [5] [6] } [lazy-and] each not]

    [1 1 + 2 =]
    [1 2 <]
    [2 1 >]
    ["test" dup =]
    [2 1 swap swap >]
    [5 factorial 120 =]

    # combinator test

    [1 [5 +] [4 +] bi >]
    [1 [[1 +] [2 +] bi] [3 +] bi + + 9 =]

    # list test

    [0 L{1 2 3} [+] each 6 =]
    [f 3 ; 2 ; 1 ; L{1 2 3} =]
    [1 2 3 3 ->list L{1 2 3} =]
    [L{1 2 3} 2 remove L{1 3} =]
    [L{1 2 3 4} [2 <=] remove-if L{3 4} =]
    [L{1 2 3 4} [2 <=] filter L{1 2} =]
    [1 (a) {a a a} L{1 1 1} =]
    [L{1 2 3} reverse L{3 2 1} =]
    [L{1 2 3} [inc] map L{2 3 4} =]
    [L{1 2 3 4} L{3 4 5 6} set-difference L{1 2} =]
    [L{1 2 3} L{3 4 5} append L{1 2 3 3 4 5} =]

    # literal test

    [C{1 2} uncons dec =]

    # table test

    [T{:a 1 :b 2} [:a >>] [:b >>] bi dec =]
    [T{:a 1 :b 2} 3 :c << T{:a 1 :b 2 :c 3} =]
    [f T{:a 1 :b 2 :c 0} [swap ; ;] table-each reverse L{C{:a 1} C{:b 2} C{:c 0}} =]
    [T{:a 1 :b 2} T{:b 3 :c 4} union T{:a 1 :b 3 :c 4} =]

    } [run-test] each
